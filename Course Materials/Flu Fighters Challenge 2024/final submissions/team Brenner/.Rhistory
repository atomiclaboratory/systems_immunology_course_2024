if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cytofast")
BiocManager::install("cytofast")
install.packages("cytofast")
load("C:/Users/ATomic/Downloads/combined_raw_tsne_export.Rdata")
View(data)
data$dataset_filtered
View(data)
data$settings$selectedColumns
ncol(data$dataset_filtered)
data$tsne_calc$info.norm
# 1. Install DEBrowser and its dependencies by running the lines below
library(pacman)
library(debrowser)
library(devtools)
startDEBrowser()
startDEBrowser()
load("Z:/Papers/preparing/fluprint study/figures/fig 5 transcriptome/ssGSEA/pca/processingData.Rdata")
# 1. Install DEBrowser and its dependencies by running the lines below
library(pacman)
library(debrowser)
library(devtools)
startDEBrowser()
startDEBrowser()
startDEBrowser()
startDEBrowser()
startDEBrowser()
# 1. Install DEBrowser and its dependencies by running the lines below
library(pacman)
library(debrowser)
library(devtools)
startDEBrowser()
startDEBrowser()
# 1. Install DEBrowser and its dependencies by running the lines below
library(pacman)
library(debrowser)
library(devtools)
startDEBrowser()
startDEBrowser()
startDEBrowser()
load("C:/Users/ATomic/Desktop/datasetExport.Rdata")
View(data)
jsonlite::toJSON(data$res.data.unboxed)
??jsonlite::toJSON
jsonlite::toJSON(data$res.data.unboxed, flatten = F, simplifyVector = F, simplifyDataFrame = F, simplifyMatrix = F, auto_unbox = T)
jsonlite::toJSON(data$res.data.unboxed, flatten = F, simplifyVector = F, simplifyDataFrame = F, simplifyMatrix = F, auto_unbox = T)
jsonlite::toJSON(data$res.data.unboxed, flatten = F, simplifyVector = F, simplifyDataFrame = F, simplifyMatrix = F, auto_unbox = F, force = T)
jsonlite::toJSON(data$res.data.unboxed, flatten = FALSE, simplifyVector = FALSE, simplifyDataFrame = FALSE, simplifyMatrix = FALSE, auto_unbox = FALSE, force = T)
str(data$res.data.unboxed)
str(data$res.data)
jsonlite::toJSON(temp_data,
flatten = FALSE,
simplifyVector = FALSE,
simplifyDataFrame = FALSE,
simplifyMatrix = FALSE,
auto_unbox = FALSE,
force = TRUE)
jsonlite::toJSON(data$res.data.unboxed,
flatten = FALSE,
simplifyVector = FALSE,
simplifyDataFrame = FALSE,
simplifyMatrix = FALSE,
auto_unbox = FALSE,
force = TRUE)
temp_data <- data$res.data
oucome <- "pandora_cluster"
# Iterate through the list and assign "xxxxxxxxxxxxxxxx" to pandora_cluster
for (name in names(temp_data)) {
# Ensure the current element is a list
if (is.list(temp_data[[name]])) {
# Assign the value "xxxxxxxxxxxxxxxx" to the pandora_cluster key
temp_data[[name]][[oucome]] <- "xxxxxxxxxxxxxxxx"
}
}
# Convert the list to JSON
json_output <- jsonlite::toJSON(temp_data,
flatten = FALSE,
simplifyVector = FALSE,
simplifyDataFrame = FALSE,
simplifyMatrix = FALSE,
auto_unbox = FALSE,
force = TRUE)
json_output
data$res.data$iml_featureimp$treebag[["pandora_cluster"]] <- "XXXXXX"
# Convert the list to JSON
json_output <- jsonlite::toJSON(temp_data,
flatten = FALSE,
simplifyVector = FALSE,
simplifyDataFrame = FALSE,
simplifyMatrix = FALSE,
auto_unbox = FALSE,
force = TRUE)
# Convert the list to JSON
jsonlite::toJSON(temp_data,
flatten = FALSE,
simplifyVector = FALSE,
simplifyDataFrame = FALSE,
simplifyMatrix = FALSE,
auto_unbox = FALSE,
force = TRUE)
# Convert the list to JSON
jsonlite::toJSON(temp_data,
flatten = FALSE,
simplifyVector = FALSE,
simplifyDataFrame = FALSE,
simplifyMatrix = FALSE,
auto_unbox = FALSE,
force = TRUE)
??toString
load("C:/Users/ATomic/Desktop/datasetExport.Rdata")
setwd("C:/Users/ATomic/Desktop/flufighters/team cohen")
library(ggplot2)
setwd("C:/Users/ATomic/Desktop/flufighters/team cohen")
load("model_rf_99.Rdata")
var_imp <- pandoraData$training$varImportance
feature_mapping <- pandoraData[["info"]][["dataset_queue_options"]][["features"]]
# Perform the renaming and add the original name column
var_imp <- var_imp %>%
left_join(feature_mapping, by = c("feature_name" = "remapped")) %>%
mutate(original_name = original) %>%
select(-position, -unique_count, -original)
View(feature_mapping)
View(pandoraData)
setwd("C:/Users/ATomic/Desktop/flufighters/team matzinger")
load("model_gbm_132.RData")
library(ggplot2)
setwd("C:/Users/ATomic/Desktop/flufighters/team matzinger")
library(ggplot2)
setwd("C:/Users/ATomic/Desktop/flufighters/team matzinger")
load("model_gbm_132.RData")
caret_model <- pandoraData$training$raw$data
View(caret_model)
View(caret_model)
pandoraData[["predictions"]][["AUROC"]][["A"]][["AUC"]]
pandoraData[["predictions"]][["AUROC"]][["B"]][["AUC"]]
pandoraData[["predictions"]][["AUROC"]][["C"]][["AUC"]]
pandoraData[["predictions"]][["AUROC"]][["C"]][["AUC"]]
var_imp <- pandoraData$training$varImportance
feature_mapping <- pandoraData[["info"]][["dataset_queue_options"]][["features"]]
# Perform the renaming and add the original name column
var_imp <- var_imp %>%
left_join(feature_mapping, by = c("feature_name" = "remapped")) %>%
mutate(original_name = original) %>%
select(-position, -unique_count, -original)
View(var_imp)
# Install the packages if they are not already installed
install.packages("dplyr")    # For pipe operator and data manipulation
install.packages("dplyr")
install.packages("magrittr") # Alternatively, for the pipe operator only
# Load the required package(s)
library(dplyr)
var_imp <- pandoraData$training$varImportance
feature_mapping <- pandoraData[["info"]][["dataset_queue_options"]][["features"]]
# Perform the renaming and add the original name column
var_imp <- var_imp %>%
left_join(feature_mapping, by = c("feature_name" = "remapped")) %>%
mutate(original_name = original) %>%
select(-position, -unique_count, -original)
View(var_imp)
setwd("C:/Users/ATomic/Desktop/flufighters/team brenner")
load("flu_fighters_predictivemodel_C5.RData")
pandoraData[["predictions"]][["AUROC"]][["A"]][["AUC"]]
pandoraData[["predictions"]][["AUROC"]][["B"]][["AUC"]]
pandoraData[["predictions"]][["AUROC"]][["C"]][["AUC"]]
